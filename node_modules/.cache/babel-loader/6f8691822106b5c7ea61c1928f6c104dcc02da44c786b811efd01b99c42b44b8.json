{"ast":null,"code":"var _jsxFileName = \"/home/hishamls/0-webProjects/ReactProjects/tasks list study - sec 7/Hisham React Tasks List/src/components/Tasks/TaskInput/TaskInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./TaskInput.module.css\"; // MAKE ALSO UNIQUE CLASSES\n// import styled from \"styled-components\"; // YOU HAVE TO INSTALL ITS PACKAGE FIRSTLY.\n// WE USE IT TO MAKE EVERY CLASS UNIQUE\n\n// const FormControl = styled.div`\n//   // IT A METHOD LIKE STYLED.DIV() = STYLED.DIV``\\SO THEY HAVE PROPS\n//   .form-control {\n//     margin: 0.5rem 0;\n//   }\n\n//   & label {\n//     font-weight: bold;\n//     display: block;\n//     margin-bottom: 0.5rem;\n//     color: ${(props) => (props.onInvalid ? \"red\" : \"black\")};\n//   }\n\n//   & input {\n//     display: block;\n//     width: 100%;\n//     border: 1px solid ${(props) => (props.onInvalid ? \"red\" : \"gray\")};\n//     background-color: ${(props) => (props.onInvalid ? \"pink\" : \"transparent\")};\n//     font: inherit;\n//     line-height: 1.5rem;\n//     padding: 0 0.25rem;\n//   }\n\n//   & input:focus {\n//     outline: none;\n//     background: #fad0ec;\n//     border-color: #8b005d;\n//   }\n\n//   .form-control {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 1rem;\n//   }\n\n//   /* &.invalid input {\n//     border-color: red;\n//     background-color: pink;\n//   } */\n//   /* &.invalid label {\n//     font-weight: bold;\n//     color: red;\n//   } */\n// `;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = props => {\n  _s();\n  const [nText, setNText] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);\n  const changeHandler = e => {\n    if (e.target.value.trim().length > 0) {\n      setIsValid(true);\n    }\n    setNText(e.target.value);\n  };\n  const submitHandler = e => {\n    e.preventDefault();\n    if (nText.trim().length === 0) {\n      setIsValid(false);\n      return;\n    } else {\n      props.onAdd(nText);\n      setNText(\"\"); // RESET THE INPUT EMPTY\n    }\n  };\n\n  //1. inline style: style={{ color: isValid ? \"black\" : \"red\" }}\n  //2. CSS style classes: .form-control.invalid input { border-color: red; background-color: pink; }\n  // JUST WRITE className={`form-control FIRST CLASS ${!isValid ? \"invalid\" SECOND CLASS : \"\"}`}\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes[\"form-control\"]} ${\n      // !isValid ? classes.invalid : \"\" // ==\n      !isValid && classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Day Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: nText // BINDING the value to the state\n        ,\n        type: \"text\",\n        onChange: changeHandler\n        // style={{\n        //   backgroundColor: isValid ? \"white\" : \"pink\",\n        //   borderColor: isValid ? \"gray\" : \"red\",\n        // }}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      className: classes.button,\n      children: \"Add a Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskInput, \"IH4lQ+ySqovsKeOqd459oDRYYM0=\");\n_c = TaskInput;\nexport default TaskInput;\nvar _c;\n$RefreshReg$(_c, \"TaskInput\");","map":{"version":3,"names":["React","useState","Button","classes","jsxDEV","_jsxDEV","TaskInput","props","_s","nText","setNText","isValid","setIsValid","changeHandler","e","target","value","trim","length","submitHandler","preventDefault","onAdd","onSubmit","children","className","invalid","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","button","_c","$RefreshReg$"],"sources":["/home/hishamls/0-webProjects/ReactProjects/tasks list study - sec 7/Hisham React Tasks List/src/components/Tasks/TaskInput/TaskInput.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./TaskInput.module.css\"; // MAKE ALSO UNIQUE CLASSES\n// import styled from \"styled-components\"; // YOU HAVE TO INSTALL ITS PACKAGE FIRSTLY.\n// WE USE IT TO MAKE EVERY CLASS UNIQUE\n\n// const FormControl = styled.div`\n//   // IT A METHOD LIKE STYLED.DIV() = STYLED.DIV``\\SO THEY HAVE PROPS\n//   .form-control {\n//     margin: 0.5rem 0;\n//   }\n\n//   & label {\n//     font-weight: bold;\n//     display: block;\n//     margin-bottom: 0.5rem;\n//     color: ${(props) => (props.onInvalid ? \"red\" : \"black\")};\n//   }\n\n//   & input {\n//     display: block;\n//     width: 100%;\n//     border: 1px solid ${(props) => (props.onInvalid ? \"red\" : \"gray\")};\n//     background-color: ${(props) => (props.onInvalid ? \"pink\" : \"transparent\")};\n//     font: inherit;\n//     line-height: 1.5rem;\n//     padding: 0 0.25rem;\n//   }\n\n//   & input:focus {\n//     outline: none;\n//     background: #fad0ec;\n//     border-color: #8b005d;\n//   }\n\n//   .form-control {\n//     display: flex;\n//     flex-direction: column;\n//     gap: 1rem;\n//   }\n\n//   /* &.invalid input {\n//     border-color: red;\n//     background-color: pink;\n//   } */\n//   /* &.invalid label {\n//     font-weight: bold;\n//     color: red;\n//   } */\n// `;\n\nconst TaskInput = (props) => {\n  const [nText, setNText] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);\n\n  const changeHandler = (e) => {\n    if (e.target.value.trim().length > 0) {\n      setIsValid(true);\n    }\n    setNText(e.target.value);\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (nText.trim().length === 0) {\n      setIsValid(false);\n      return;\n    } else {\n      props.onAdd(nText);\n      setNText(\"\"); // RESET THE INPUT EMPTY\n    }\n  };\n\n  //1. inline style: style={{ color: isValid ? \"black\" : \"red\" }}\n  //2. CSS style classes: .form-control.invalid input { border-color: red; background-color: pink; }\n  // JUST WRITE className={`form-control FIRST CLASS ${!isValid ? \"invalid\" SECOND CLASS : \"\"}`}\n\n  return (\n    <form onSubmit={submitHandler}>\n      {/* NOT WORK <div className={`form-control ${isValid ? \"\" : \"invalid\"}`}> */}\n      {/* <FormControl className={`form-control ${!isValid ? \"invalid\" : \"\"}`}> */}\n      {/* <FormControl onInvalid={!isValid}> */}\n      <div\n        className={`${classes[\"form-control\"]} ${\n          // !isValid ? classes.invalid : \"\" // ==\n          !isValid && classes.invalid\n        }`}\n      >\n        <label\n        // style={{ color: isValid ? \"black\" : \"red\" }}\n        >\n          Day Tasks\n        </label>\n        <input\n          value={nText} // BINDING the value to the state\n          type=\"text\"\n          onChange={changeHandler}\n          // style={{\n          //   backgroundColor: isValid ? \"white\" : \"pink\",\n          //   borderColor: isValid ? \"gray\" : \"red\",\n          // }}\n        />\n      </div>\n      <Button type=\"submit\" className={classes.button}>\n        Add a Task\n      </Button>\n    </form>\n  );\n};\n\nexport default TaskInput;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,OAAO,MAAM,wBAAwB,CAAC,CAAC;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMY,aAAa,GAAIC,CAAC,IAAK;IAC3B,IAAIA,CAAC,CAACC,MAAM,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MACpCN,UAAU,CAAC,IAAI,CAAC;IAClB;IACAF,QAAQ,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMG,aAAa,GAAIL,CAAC,IAAK;IAC3BA,CAAC,CAACM,cAAc,CAAC,CAAC;IAClB,IAAIX,KAAK,CAACQ,IAAI,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;MAC7BN,UAAU,CAAC,KAAK,CAAC;MACjB;IACF,CAAC,MAAM;MACLL,KAAK,CAACc,KAAK,CAACZ,KAAK,CAAC;MAClBC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAChB;EACF,CAAC;;EAED;EACA;EACA;;EAEA,oBACEL,OAAA;IAAMiB,QAAQ,EAAEH,aAAc;IAAAI,QAAA,gBAI5BlB,OAAA;MACEmB,SAAS,EAAG,GAAErB,OAAO,CAAC,cAAc,CAAE;MACpC;MACA,CAACQ,OAAO,IAAIR,OAAO,CAACsB,OACrB,EAAE;MAAAF,QAAA,gBAEHlB,OAAA;QAAAkB,QAAA,EAEC;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACRxB,OAAA;QACEW,KAAK,EAAEP,KAAM,CAAC;QAAA;QACdqB,IAAI,EAAC,MAAM;QACXC,QAAQ,EAAElB;QACV;QACA;QACA;QACA;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNxB,OAAA,CAACH,MAAM;MAAC4B,IAAI,EAAC,QAAQ;MAACN,SAAS,EAAErB,OAAO,CAAC6B,MAAO;MAAAT,QAAA,EAAC;IAEjD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX,CAAC;AAACrB,EAAA,CAzDIF,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AA2Df,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}